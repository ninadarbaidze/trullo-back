generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  username   String          @unique
  email      String          @unique
  firstName  String
  lastName   String
  password   String
  boards     UsersOnBoards[]
  isVerified Boolean         @default(false)
  avatar     String?
  comments   Comment[]
  tasks      UsersOnTasks[]
}

model UsersOnBoards {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  board   Board @relation(fields: [boardId], references: [id])
  boardId Int

  @@id([userId, boardId])
}

model Board {
  id           Int               @id @default(autoincrement())
  name         String
  image        String?
  users        UsersOnBoards[]
  columns      Column[]
  tasks        Task[]
  boardOwnerId Int
  createdAt    DateTime          @default(now())
  description  BoardDescription?
}

model BoardDescription {
  id      Int    @id @default(autoincrement())
  content String @db.Text
  board   Board  @relation(fields: [boardId], references: [id])
  boardId Int    @unique
}

model Column {
  id             Int    @id @default(autoincrement())
  title          String @db.VarChar(255)
  board          Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId        Int
  columnPosition Int
  tasks          Task[]

  @@index([columnPosition])
}

model Task {
  id           Int               @id @default(autoincrement())
  taskPosition Int
  content      String
  image        String?
  column       Column?           @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId     Int?
  board        Board             @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId      Int               @default(1)
  difficulty   Int?
  description  TaskDescription?
  attachments  TaskAttachments[]
  comments     Comment[]
  users        UsersOnTasks[]
  labels       LabelsOnTasks[]

  @@index([taskPosition])
}

model TaskDescription {
  id      Int    @id @default(autoincrement())
  content String @db.Text
  Task    Task   @relation(fields: [taskId], references: [id])
  taskId  Int    @unique
}

model TaskAttachments {
  id        Int      @id @default(autoincrement())
  file      String?
  task      Task     @relation(references: [id], fields: [taskId])
  taskId    Int
  type      Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime @default(now())
}

model UsersOnTasks {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  @@id([userId, taskId])
}

model Label {
  id    Int             @id @default(autoincrement())
  title String
  color String
  tasks LabelsOnTasks[]
}

model LabelsOnTasks {
  label   Label @relation(fields: [labelId], references: [id])
  labelId Int
  task    Task  @relation(fields: [taskId], references: [id])
  taskId  Int

  @@id([taskId, labelId])
}
